/*
 * Project generated by Templater
 * Argore 2024
 */


#include "Reflection/Reflection.h"
#include <iostream>


class cTest
{
public:
	static void runTest();
};
REFLECT_STATIC_MEMBER( cTest, runTest )

static void doThing( int _i ); REFLECT_STATIC( doThing )
static void doSingleThing();   REFLECT_STATIC( doSingleThing )



/* impl */
void doThing( int _i )
{
	printf( "Did thing %i\n", _i );
}

void doSingleThing()
{
	printf( "no args:(\n" );
}

void cTest::runTest()
{
	printf( "Ran test\n" );
}

int main()
{
	for( auto& f : cReflectionRegistry::m_reflection_descriptors )
		printf( "%s()\n  %s (%i)\n\n", f.second.name.c_str(), f.second.file.c_str(), f.second.line );

	cReflectionRegistry::callFunction( "doThing", { "321123" } );
	cReflectionRegistry::callFunction( "doSingleThing" );
	cReflectionRegistry::callFunction( "cTest::runTest" );

	return 0;
}